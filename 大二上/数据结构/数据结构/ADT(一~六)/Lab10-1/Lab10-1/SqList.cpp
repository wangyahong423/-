/***
*SqList- 排序表
*
*
*题目：实验10 排序表
*
*班级：
*
*姓名：
*
*学号：
*	
****/
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <assert.h>
#include "SqList.h"
/*------------------------------------------------------------
操作目的：	初始化排序表
初始条件：	无
操作结果：	构造一个符合你输入长度的排序表（排序表的内容就是你输入的各个值）
函数参数：
		SqList *ll	待初始化的SqList *ll
返回值：
		无
------------------------------------------------------------*/
void InitSqList(SqList *ll){
    
}
/*------------------------------------------------------------
操作目的：	对排序表的自low至high部分进行划分
初始条件：	排序表L已经存在,下标low与high值合法
操作结果：	保证比枢轴(pivot)所对应的元素小的元素都放在它的前面，比它大的都放在它后面。我们暂时选择首元素为枢轴
函数参数：
		SqList *L	待划分的排序表
		int low     下标
		int high    上标
返回值：
		bool		操作是否成功

------------------------------------------------------------*/
int Partion(SqList *L,int low,int high)
{
    
}

/*------------------------------------------------------------
操作目的：	对排序表进行快速排序
初始条件：	排序表L已存在
操作结果：	得到自小至大的排序表
函数参数：
		SqList *L	待排序的排序表
		int low     排序表的下界
        int high    排序表的上界
返回值：
		无
------------------------------------------------------------*/
void QSort(SqList *L,int low,int high)
{
	
}
/*------------------------------------------------------------
操作目的：	将排序表调成一个大根堆
初始条件：	排序表L已存在
操作结果：	构造一个大根堆L
函数参数：
		SqList *L	待调整的排序表
		int s       堆的下界
		int m       堆的上界
返回值：
		无
------------------------------------------------------------*/
//调整堆
void HeapAdjust(SqList *L,int s,int m){
	
}
/*------------------------------------------------------------
操作目的：	对排序表进行堆排序
初始条件：	排序表L已存在
操作结果：	整个排序表有序
函数参数：
		SqList *L	待排序的排序表
返回值：
		无
------------------------------------------------------------*/
//堆排序
void HeapSort(SqList *L){
	
}
/*------------------------------------------------------------
操作目的：	对排序表进行直接插入排序
初始条件：	排序表ll已存在
操作结果：	得到自小至大的排序表
函数参数：
		SqList *ll	待排序的排序表		
返回值：
		无
------------------------------------------------------------*/
//插入排序
void InsertSort(SqList *ll){
	
}
/*------------------------------------------------------------
操作目的：	对排序表进行增量为dk的希尔排序
初始条件：	排序表ll已存在
操作结果：	排序表增量有序
函数参数：
		SqList *ll	待排序的排序表
返回值：
		无
------------------------------------------------------------*/
//1趟希尔排序
void ShellInsert(SqList *ll,int dk){
    
}
/*------------------------------------------------------------
操作目的：	对排序表进行希尔排序
初始条件：	排序表L已存在
操作结果：	得到自小至大的排序表
函数参数：
		SqList *ll	待排序的排序表
		int dlta[]  递减增量数组
        int t       递减增量数组长度
返回值：
		无
------------------------------------------------------------*/
//希尔排序
void ShellSort(SqList *ll, int dlta[],int t){
	
}